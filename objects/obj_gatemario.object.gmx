<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_goal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>spr_bigmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario on the flagpole

//Stop the music and time
with obj_uni_levelmanager
{
    alarm[2] = 0
}

audio_stop_sound(global.uni_musicpack[60]) //Course Clear
audio_stop_sound(global.uni_musicpack[64]) //Boss Clear
audio_stop_sound(global.uni_musicpack[54]) //Super Star
audio_stop_sound(global.uni_musicpack[55]) //P-Switch

//Forget checkpoints
global.checkpoint = noone

sprite_index = scr_mariowalk();

//Use small mask for small Mario
if global.powerup = cs_small
    mask_index = spr_smallmask

//Goal Mario's state
ready = 0
type = 0;
type_start = 0;

alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the world map after the music is done playing
if audio_is_playing(global.uni_musicpack[60]) //Course Clear
    alarm[3] = 1
else{
        if(global.uni_mode == 0){        
            with(obj_uni_layout_play)
                event_user(0);
            instance_destroy();
        }
        else{
         instance_create(0,0,obj_uni_player_text);
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take points off the time, and add to the score

//If there is no time left
if global.timer = 0
{

    //Play the count end sound
    audio_play_sound(snd_countend,0,0)

    //Return to the world map
    alarm[3] = 1

}

//Otherwise
else
{

    //If there is more than 4 seconds left
    if global.timer &gt; 4
    {

        //Add 500 to the score
        score += 500

        //Subtract 5 seconds from the time
        global.timer -= 5

    }

    //Otherwise
    else
    {

        //Add 100 to the score
        score += 100

        //Decrement the time
        global.timer--

    }

    //Play the count sound
    audio_play_sound(snd_count,0,0)

    //Continue counting down
    alarm[2] = 4

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start walking

//Physics state
ready = 2;

//Face right
image_xscale = 1

//Jump rightwards - Se for por Flag Pole
hspeed = 1

if!(place_meeting(x,y,obj_swim))
vspeed = -3;

//Animate
image_speed = 0.53;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Play the flagpole music
audio_play_sound(global.uni_musicpack[60],1,0) //Course Clear
alarm[3] = 2;

///WALK after land
if(type == 1){
    
    ready = 2;
    type_start = 0;
};
//FLAG POLE
else{

    //Do not animate
    image_speed = 0
    
    //Use the goal sprite
    sprite_index = scr_mariogoal();
    
    //Move down
    vspeed = 1.5
    
    //Start walking after reaching the bottom
    alarm[1] = 130
    
    //Play the flagpole sound
    audio_play_sound(global.uni_musicpack[60],1,0) //Course Clear
    
    alarm[3] = 2;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Goal Mario logic

//Use small mask for small Mario
    if global.powerup = cs_small
        mask_index = spr_smallmask
    else
        mask_index = spr_bigmask
    
//When in the physics or countdown state
if ready = 2
or ready = 3
{

    //Prevent physics parent from destroying (Hack)
    if bbox_top &gt; room_height
    {
        if ready = 2
            hspeed = -1
        y = room_height-32
        visible = 0
    }

    //Default event
    event_inherited()

    //If Mario reached a wall or fell out of the room when in the physics state
    if ready = 2
    and hspeed &lt; 0
    {

        //Countdown state
        ready = 3

        //Stop walking
        hspeed = 0
        image_index = 0;
        sprite_index = scr_mariowalk();

    }

    //When on the ground, use walking sprite
    if gravity = 0
    {
        if(hspeed == 0)
            sprite_index = scr_mariowalk();     
    };

    //Otherwise
    else
    {

        //Use the jump sprite
        sprite_index = scr_mariojump()
        if (vspeed &lt; 0)
        image_index = 0;
        else
        image_index = 1;

    }
    
    if(type == 1)
    &amp;&amp;(type_start == 0){
    
        if(gravity == 0)
        &amp;&amp;(vspeed == 0){
        
            hspeed = 1;
            
            //Animate
            image_speed = 0.53;
            
            type_start = 1;
        }
    };

}

if(hspeed = 0)
&amp;&amp;(sprite_index != scr_mariojump())
    image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,round(x),round(y),image_xscale,1,0,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
